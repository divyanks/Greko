#pragma once
#include "ntddk.h"
#include <mountdev.h>

extern DRIVER_INITIALIZE DriverEntry;
typedef struct _VOL_INFO
{
	WCHAR  wDriveLetter;
	WCHAR  wGUID[37];
	EBDR_BITMAP *ebdr_bitmap;
	BOOLEAN ebdr_tracking_enabled;
}VOL_INFO, *PVOL_INFO;

typedef struct _DEVICE_EXTENSION
{
	PDEVICE_OBJECT pdo;
	PDEVICE_OBJECT fdo;
	PDEVICE_OBJECT LowerDeviceObject;
	PKEVENT        PagingPathCountEvent;
	PVOL_INFO      VolInfo;
}DEVICE_EXTENSION, *PDEVICE_EXTENSION;

UINT32 ebdr_find_pos(EBDR_BITMAP *bitmap, sector_t addr);
void ebdr_set_bits(PEBDR_BITMAP bitmap, int first, int last);
NTSTATUS EbdrFltShutdownFlush(IN PDEVICE_OBJECT DeviceObject,	IN PIRP Irp);
NTSTATUS EbdrFltWrite(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);
NTSTATUS EbdrFltDeviceControl(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);
NTSTATUS EbdrFltStartDevice(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);
NTSTATUS EbdrFltIrpCompletion(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp, IN PVOID Context);
NTSTATUS EbdrFltRemoveDevice(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);
NTSTATUS EbdrFltAddDevice(PDRIVER_OBJECT DriverObject, PDEVICE_OBJECT pdo);
NTSTATUS EbdrFltSendToNextDriver(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);
NTSTATUS EbdrFltForwardIrpSynchronous(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);
NTSTATUS EbdrFltDispatchPnp(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);
NTSTATUS EbdrFltDispatchPower(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);
NTSTATUS EbdrFltShutdown(PDEVICE_OBJECT DeviceObject, PIRP Irp);

void EbdrFltUnload(IN PDRIVER_OBJECT DriverObject);
VOID EbdrFltSyncFilterWithTarget(IN PDEVICE_OBJECT FilterDevice, IN PDEVICE_OBJECT TargetDevice);

NTSTATUS MapBufferForUserModeUse(PVOL_INFO pVolInfo, PVOID * Address);

#define EBDR_DRIVER_NAME      L"ebdrvolflt.sys"
#define EBDR_DEVICE_NAME      L"ebdrvolflt"
#define EBDR_W32_DEVICE_NAME  L"\\\\.\\ebdrvolflt"
#define EBDR_DOSDEVICE_NAME   L"\\DosDevices\\ebdrvolflt"
#define EBDRDEVICECONTROLTYPE 0x9000
/*
              CTL_CODE(EBDRDEVICECONTROLTYPE, 0x900, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EBDRCTL_GET_USER                CTL_CODE(EBDRDEVICECONTROLTYPE, 0x901, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EBDRCTL_FLIP_BITMAP_AREA        CTL_CODE(EBDRDEVICECONTROLTYPE, 0x902, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EBDRCTL_CHECK_BITMAP            CTL_CODE(EBDRDEVICECONTROLTYPE, 0x903, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EBDRCTRL_DESTROY                CTL_CODE(EBDRDEVICECONTROLTYPE, 0x904, METHOD_BUFFERED, FILE_ANY_ACCESS)
*/


#define	EBDRCTL_DEV_CREATE        CTL_CODE(EBDRDEVICECONTROLTYPE, 0x900, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define	EBDRCTL_BLKDEV_CREATE     CTL_CODE(EBDRDEVICECONTROLTYPE, 0x901, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define	EBDRCTL_BLKDEV_ATTACH     CTL_CODE(EBDRDEVICECONTROLTYPE, 0x902, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define	EBDRCTL_BLKDEV_DESTROY    CTL_CODE(EBDRDEVICECONTROLTYPE, 0x903, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define	EBDRCTL_DEV_DESTROY       CTL_CODE(EBDRDEVICECONTROLTYPE, 0x904, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define EBDRCTL_MEMCTL_CREATE     CTL_CODE(EBDRDEVICECONTROLTYPE, 0x905, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EBDRCTL_SET_GRAIN_SIZE    CTL_CODE(EBDRDEVICECONTROLTYPE, 0x906, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define EBDRCTL_SET_BITMAP_SIZE   CTL_CODE(EBDRDEVICECONTROLTYPE, 0x907, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define	EBDR_FLIP_BITMAP_AREA     CTL_CODE(EBDRDEVICECONTROLTYPE, 0x908, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define EBDRCTL_GET_GRAIN_SIZE    CTL_CODE(EBDRDEVICECONTROLTYPE, 0x909, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define EBDRCTL_GET_USER          CTL_CODE(EBDRDEVICECONTROLTYPE, 0x910, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define	EBDRCTL_BLKDEV_SEARCH     CTL_CODE(EBDRDEVICECONTROLTYPE, 0x9011, METHOD_BUFFERED, FILE_ANY_ACCESS)

